Dropbox Automation Project.


BASIC INFO.

This project is done using Java, Webdriver, Page Object pattern, Property (*.ini) files, and TestNg framework for running, generating and sending by email test run reports.
Also the project uses Dropbox SDK to perform API calls.


PROJECT STRUCTURE.

Pages(screens), used in the project:

Pages that describe browser windows:
- BasePage (package org.dropbox.page.basepage) - it has common methods for webelement operations (click on element, send text, ...), and is parent for other page classes;
- DropboxLoginPage (package org.dropbox.page.dropbox) - starting page for testcases;
- DropboxHomePage (package org.dropbox.page.dropbox) - page for testcases;

Each page has its specific methods, used in testcases.

Pages that describe testcases:
- BaseTestCase (package org.dropbox.test.basetest) - parent class for testcases. It initialize browser windows and driver;
- DropboxCleanUp (package org.dropbox.test.testcases) performs delete of custom folders and files from the root folder before and after each test run, so the Dropbox user account every time is "clean"
- Testcases from package org.dropbox.test.testcases.api and package org.dropbox.test.testcases.ui - actual testcases.

All pages(except BasePage as it is not present in testcases) are instantiated in BaseTestCase class, which is parent class for testcase classes. Also in BaseTest case there are driver initializing and driver "quit" methods.

Testcase classes use instances of page classes and their appropriate methods for executing test steps. 

All values are provided in separate Property files, with the same name as testcase class name. 
To retrieve value from Property file there is Utils class with "getIniFileValue" method for easy values operating. 
The Property files are stored in resources/testcases/ folder.

In resources/config/ folder there is "globalConfig.ini" file that holds values for configuring the whole project:
 - browser type (firefox or chrome);
 - the number of seconds for iplicitly wait;
 - Dropbox start Url;
 - Dropbox access token for the current user.

The script checks the OS, and chooses the correct webdriver exe 
cutable file (currently there are files for Linux and Windows OS only)


DROPBOX USER

Current user credentials are provided in testng.xml file and are:
user name :  dropboxwebdriver@yahoo.com
password : 1Selenium!
As well access token is set in globalConfig.ini file.
The user dropboxwebdriver@yahoo.com is a Yahoo user with the same password and was created specially for the Dropbox test project, so it doesnt hold any private information and can be accesses with any person who is interested in the project.

To change the current user the new credentials should be set in testng.xml file and new access token in globalConfig.ini file.
 



TESTSUITE

The testsuite is defined in testng.xml file, in project root.
It list the classes that have to be executed.
Some of the testcases have main part in UI and verificatio part thru API (i.e:TestUiMoveFile and TestApiMovedFile), some - vive versa (i.e: TestApiUploadFile and TestUiUploadedFile)


RUNNING THE TESTCASES.

Unzip it to a preferable path, and navigate to this path in console (i.e.  ~/Project/DropboxTest$ ).
Run "mvn clean install" command (Maven has to be installed to run this command). Normally the project compiles and test run.

The usual test run console output:

Results :

Tests run: 7, Failures: 0, Errors: 0, Skipped: 0


After testcase run the Maven should display message "[INFO] BUILD SUCCESS" and send the report file by email. 



TEST REPORT.

Test report is generated by TestNg framework and is stored in /Project/DropboxTest/test-output/emailable-report.html file. 

Also there is configured postman plugin for Maven that send the report by email.
Receivers list is set in pom.xml file, in maven-postman-plugin section, lines 93-96.
It is possible to add new receivers to existing list.

The report is sent from dropboxwebdriver@yahoo.com account, which was created on purpose for this project.

